{"version":3,"sources":["Main.js","Utils/MenuIcon.js","Contact.js","Pages.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Main","useState","raw","setRaw","gallery","setGallery","useEffect","Axios","get","then","res","data","galleries","map","el","index","classes","key","alt","className","src","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","openedTransformationConfig","top","center","bottom","color","closedTransformationConfig","MenuIcon","props","useSpring","to","isOpened","config","stiff","onClick","showNav","style","zIndex","display","isMobile","svg","width","height","viewBox","fill","xmlns","rect","rx","transform","Contact","letterSpacing","marginBottom","fontWeight","fontSize","Pages","content","setContent","folder","Object","keys","folders","includes","title","process","Navbar","state","activeIndex","handleClick","console","log","newIndex","setState","this","section","Accordion","Title","active","Content","sort","a","b","path","substr","replace","navBarList","tmp","concat","marginLeft","marginTop","Component","App","setFolders","window","innerWidth","setShowNav","setIsMobile","addEventListener","handleMobile","removeEventListener","axios","handleNav","allPages","forEach","overflow","position","exact","component","paths","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3cb380b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Axios from 'axios';\n\nconst Main = () => {\n    const [raw, setRaw] = useState([])\n    const [gallery, setGallery] = useState([])\n\n    // function importAll(r) {\n    //     return r.keys().map(r);\n    // }\n\n    function shuffle(array) {\n        var currentIndex = array.length, temporaryValue, randomIndex;\n      \n        // While there remain elements to shuffle...\n        while (0 !== currentIndex) {\n      \n          // Pick a remaining element...\n          randomIndex = Math.floor(Math.random() * currentIndex);\n          currentIndex -= 1;\n      \n          // And swap it with the current element.\n          temporaryValue = array[currentIndex];\n          array[currentIndex] = array[randomIndex];\n          array[randomIndex] = temporaryValue;\n        }\n      \n        return array;\n      }\n\n    useEffect(() => {\n        Axios.get(`/getPage?folder=mainImg&page=0}`)\n            .then((res) => setRaw(res.data))\n    }, [])  \n\n    useEffect(() => {\n        let galleries = raw.map((el, index) => \n        {\n            let classes = \"\"\n            if (index % 1 === 0) classes = \"main1\"\n            if (index % 2 === 0) classes = \"main2\"\n            if (index % 3 === 0) classes = \"main3\"\n            return  <img key={el} alt=\"\" className={classes} src={el}></img>\n        })\n        setGallery(shuffle(galleries))\n    }, [raw])\n    \n    \n      \n    return(\n        <div className=\"picture_div2\">\n            <div className=\"main0\">\n                {gallery}\n            </div>\n        </div>\n    )\n}\n\nexport default Main","import React from 'react'\nimport { animated, useSpring, config } from 'react-spring'\n\nconst openedTransformationConfig = {\n    top: 'translate(2, 7) rotate(0)',\n    center: 'translate(2, 19) rotate(0)',\n    bottom: 'translate(2, 31) rotate(0)',\n    color: 'rgb(0,0,0)', // Add color\n}\n\nconst closedTransformationConfig = {\n    top: 'translate(5, 32) rotate(-45)',\n    center: 'translate(10, 4) rotate(45)',\n    bottom: 'translate(5, 32) rotate(-45)',\n    color: 'rgb(0,0,0)', // Add color\n}\n\nconst  MenuIcon = (props) => {\n    const { top, center, bottom, color } = useSpring({\n        to: props.isOpened ? closedTransformationConfig : openedTransformationConfig,\n        config: config.stiff,\n    })\n    return (\n        <div onClick={props.showNav} style={{zIndex: \"1\", display: props.isMobile ? \"block\" : \"none\" }}>\n            <animated.svg width=\"44\" height=\"44\" viewBox=\"0 0 44 44\" fill={color} xmlns=\"http://www.w3.org/2000/svg\">\n                <animated.rect width=\"40\" height=\".4em\" rx=\"3\" transform={top} />\n                <animated.rect width=\"40\" height=\".4em\" rx=\"3\" transform={center} />\n                <animated.rect width=\"40\" height=\".4em\" rx=\"3\" transform={bottom} />\n            </animated.svg>\n        </div>\n    )\n}\nexport default MenuIcon","import React from 'react'\n\nconst Contact = (props) => {\n    return(\n        <div className=\"contact_div\">\n            <h1 style={{letterSpacing: \".2em\", marginBottom: \"1.5em\"}}>Louise Girardin</h1>\n            <h2 style={{fontWeight: \"400\", letterSpacing: \".2em\"}}>Based in Paris</h2>\n            <h2 style={{fontWeight: \"400\", fontSize: \"1em\", color: \"grey\", letterSpacing: \".2em\"}}>louise.girardin@gmail.com</h2>\n        </div>\n    )\n}\n\nexport default Contact","import React, {useState, useEffect} from 'react'\nimport Axios from 'axios'\n\nconst Pages = (props) => {\n    const [content, setContent] = useState([])\n\n    useEffect(() => {\n        const keys = Object.keys(props.folders);\n        let folder = \"\";\n\n        for(let key of keys) if(props.folders[key].includes(props.title)) folder = key;\n\n        Axios.get(`/getPage?folder=${folder}&page=${props.title}`)\n            .then((res) => setContent(res.data))\n    }, [])\n\n    return (\n        <div className=\"picture_div\">\n            {content.map((el) => <img key={el} alt=\"\" className=\"img\" src={process.env.PUBLIC_URL + el}></img> )}\n        </div>\n    )\n}\n\nexport default Pages","import React, { Component } from 'react'\nimport { Accordion } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom';\n\nclass Navbar extends Component {\n  state = { activeIndex: -1 }\n    \n  handleClick = (index) => {\n    console.log(\"handleClick index: \" + index)\n    const { activeIndex } = this.state\n    const newIndex = activeIndex === index ? -1 : index\n\n    this.setState({ activeIndex: newIndex })\n  }\n\n  render() {\n    const { activeIndex } = this.state\n    const folders = this.props.folders\n    const keys = Object.keys(folders);\n\n    const section = (folders, key, index) => {\n        return (\n            <div key={index}>\n                <Accordion.Title\n                    active={false}\n                    index={index}\n                    onClick={() => this.handleClick(index)}>\n                    <p className=\"navbar-title\">{key}</p>\n                </Accordion.Title>\n                <Accordion.Content active={activeIndex === index}>\n                    <ul>\n                        {folders[key].sort((a,b) => a[0] > b[0]).map((el) => {\n                            const path = `/${el}`\n                            el = el.substr(1).replace(/_/g, \" \")\n                            if(el !== \"DS Store\")\n                                return (\n                                    <li key={el}><Link onClick={ () => { if (this.props.isMobile) this.props.showNav() }}\n                                        className=\"link\"\n                                        to={path}>\n                                    {el}</Link></li>\n                                )\n                            else return null;\n                        })}\n                    </ul>\n                </Accordion.Content>\n            </div>\n        )\n    }\n\n    let navBarList = []\n    for(let key in keys) {\n        console.log(\"key: \" +  key)\n        let tmp = section(folders, keys[key], key)\n        navBarList = navBarList.concat(tmp)\n    }\n\n    console.log(\"activeIndex: \" + activeIndex)\n\n    return (\n        <div className=\"navbar\">\n            <Accordion>\n                {navBarList}\n                <Link  onClick={ () => { if (this.props.isMobile) this.props.showNav() }} to=\"/Contact\"><p className=\"navbar-title\" style={{marginLeft: \"-7%\", marginTop: \"20px\"}}>CONTACT</p></Link>\n            </Accordion>\n        </div>\n    )\n  }\n}\n\nexport default Navbar","import React, { useEffect, useState } from 'react';\nimport  {HashRouter as Router, Switch, Route, Link} from 'react-router-dom'\nimport axios from 'axios';\n\nimport Main from './Main';\nimport MenuIcon from './Utils/MenuIcon';\nimport Contact from './Contact';\nimport Pages from './Pages';\nimport Navbar from './Navbar'\n\nconst App = ()  => {\n  const [folders, setFolders] = useState({});\n  const [showNav, setShowNav] = useState(window.innerWidth <= 640 ? false : true,)\n  const [isMobile, setIsMobile] = useState(window.innerWidth <= 640 ? true : false,)\n  \n  useEffect(() => {\n    window.addEventListener('resize', handleMobile)\n    return () =>\n    window.removeEventListener('resize', handleMobile)\n  })\n\n  useEffect(() => {\n    axios.get('/folderInfos')\n        .then(res => setFolders(res.data))\n  }, [])\n\n  const handleNav = () => { setShowNav(!showNav) }\n\n  const handleMobile = () => { \n    setIsMobile(window.innerWidth <= 640 ? true : false);\n    setShowNav(window.innerWidth <= 640 ? false : true);\n  }\n\n  let allPages = []\n  Object.keys(folders).forEach(function (key) {\n      allPages = allPages.concat(folders[key]);\n  });\n\n  return (\n    \n    <div  style={{overflow: \"hidden\"}}>\n      <Router>\n\n        <div className=\"Row\" style={{position: \"fixed\", zIndex: \"1\"}}>\n          <MenuIcon showNav={handleNav} isOpened={showNav} isMobile={isMobile}/>\n          <Link className=\"Main_title\" to=\"/\" onClick={() => setShowNav(window.innerWidth <= 640 ? false : true)}><h1>LOUISE GIRARDIN</h1></Link>\n        </div>\n\n        <div className=\"Row\" >\n\n          <div className=\"Col1\" style={{marginLeft: showNav ? 0 : \"-250px\", position: \"fixed\"}}>\n            <Navbar showNav={handleNav} isMobile={isMobile} folders={folders}/>\n          </div>\n          \n          <div className=\"Col2\" style={{marginLeft: showNav ? \"250px\" : 0}}>\n            <Switch >\n                <Route path=\"/\" exact component={Main}/>\n                {\n                    allPages.map((el) =>  {\n                        let paths= `/${el}`;\n                        return (\n                        <Route key={el} path={paths} component={() => <Pages folders={folders}  title={el}/> }/>\n                    )})\n                }\n                <Route path=\"/Contact\" component={Contact} />\n            </Switch>\n          </div>\n        </div>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}